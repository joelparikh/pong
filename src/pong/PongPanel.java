/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PongPanel.java
 *
 * Created on 24-Mar-2015, 2:53:12 PM
 */
package pong;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.Timer;

/**
 *
 * @author 133371
 */
public class PongPanel extends javax.swing.JPanel {

    BufferedImage myImage;
    Game game = new Game();
    private int gameOverCount = 1000;

    /** Creates new form PongPanel */
    public PongPanel() {
        initComponents();

        //set a timer
        Timer myTimer = new Timer(5, new ActionListener() {

            public void actionPerformed(ActionEvent evt) {

                formActionPerformed(evt);
            }
        });
        myTimer.start();
        this.setFocusable(true);
        this.requestFocusInWindow();

        try {  //you can initialize all of your images in a single try/catch

            // the image must be in the same directory as the files
            myImage = ImageIO.read(new File("black.jpg"));

        } catch (Exception e) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(600, 400));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //this method runs when a key is pressed
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (gameOverCount != 0) {
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                this.game.humanPaddleUpdate(-10);
            } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                this.game.humanPaddleUpdate(10);
            }
            this.repaint();
        }
    }//GEN-LAST:event_formKeyPressed

    //this method runs once every 30 milliseconds
    private void formActionPerformed(ActionEvent evt) {
        game.update(1);
        this.repaint();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.drawImage(myImage, 0, 0, null);
        if (game.getHumanScore() == 2 || game.getComputerScore() == 2) { // change the value to 10
            Font font = new Font("Arial", Font.BOLD, 40);
            g.setFont(font);
            g.setColor(Color.red);
            g.drawString("GAME OVER", 200, 200);
            gameOverCount--;
            if (gameOverCount == 0) {
                game.setHumanScore(0);
                game.setComputerScore(0);
                gameOverCount = 1000;
                System.out.println("WORKS!");
            }
            font = new Font("Calibria", Font.BOLD, 15);
            g.setFont(font);
            g.setColor(Color.blue);
            if (game.getHumanScore() == 2) { // change the value to 10
                g.drawString("HUMAN PLAYER WINS!", 250, 250);
            } else {
                g.drawString("COMPUTER WINS!", 260, 250);
            }

        } else {
            this.game.paint(g);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
